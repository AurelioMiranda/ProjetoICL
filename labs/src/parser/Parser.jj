options {
  STATIC=false;
}

PARSER_BEGIN(Parser)

package parser;
import ast.*;

public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}
TOKEN : /* OPERATORS */
{
  < Num: (["0"-"9"]) + >
| < PLUS : "+" >
| < TIMES : "*" >
| < MINUS : "-">
| < GT: ">" >
| < LT: "<" >
| < NEG: "!">
| < DIV : "/">
| < LPAR : "(" >
| < RPAR : ")" >
| < TRUE : "true" >
| < FALSE : "false" >
| < EQ : "=" >
| < AND : "and" >
| < OR : "or" >
| < IFQ : "?" >
| < COLON : ":" >
| < EOL: "\n" >
| < LET: "let" >
| < IN: "in" >
}

TOKEN :
{
  < INT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
| < ID : (< LETTER >)+ >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
}

Exp Start() :
{ Exp e; }
{
   e = logic() <EOL>  { return e; }
}


Exp logic():
{ Exp e1,e2; }
{
 e1 = boolOp() ( <AND> e2=boolOp() { e1 = new ASTAnd(e1,e2); }
                | <OR> e2=boolOp() { e1 = new ASTOr(e1,e2); } )*
  { return e1; }
}

Exp boolOp():
{ Exp e1,e2; }
{
 e1 = Expr() ( <EQ> e2=Expr() { e1 = new ASTEq(e1,e2); }
                | <GT> e2=Expr() { e1 = new ASTGr(e1,e2); }
                | <LT> e2=Expr() { e1 = new ASTLt(e1,e2); } )*
  { return e1; }
}


Exp Expr() :
{ Exp e1, e2; }
{
   e1 = Term()
     [ <PLUS> e2 = Expr() { e1 = new ASTAdd(e1,e2); }
     | <MINUS> e2 = Expr() { e1 = new ASTSub(e1,e2); } ]
     { return e1; }
}

Exp Term() :
{ Exp e1, e2; }
{
     e1 = Fact()
     [ <TIMES> e2 = Term() { e1 = new ASTMult(e1,e2); }
     | <DIV> e2 = Term() { e1 = new ASTDiv(e1,e2); } ]
     { return e1; }
}

Exp Fact() :
{ Token x; Exp e;}
{
  	x = <Num>
 {
 	return new ASTInt(Integer.parseInt(x.image));
 }
 |
   <LPAR> e = Expr() <RPAR> { return e; }
}

Exp Bool_Fact() :
{ Token x; Exp e;}
{
  	x = <TRUE> | x = <FALSE>
 {
 	return new ASTInt(Integer.parseInt(x.image));
 }
 |
   <LPAR> e = Expr() <RPAR> { return e; }
}
/*
Exp Bool_op():
{ Exp e1; Exp e2; }
{
    e1 = Term()
    [<AND> e2 = Bool_op() { e1 = new ASTMult(e1, e2)}
    | <OR> e2 = Bool_op() { e1 = new ASTDiv(e1,e2); } ]
    { return e2 }
}*/