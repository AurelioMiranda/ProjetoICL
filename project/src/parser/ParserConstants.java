/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package parser;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int Num = 4;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int TIMES = 6;
  /** RegularExpression Id. */
  int MINUS = 7;
  /** RegularExpression Id. */
  int NEG = 8;
  /** RegularExpression Id. */
  int GT = 9;
  /** RegularExpression Id. */
  int LT = 10;
  /** RegularExpression Id. */
  int GTOEQ = 11;
  /** RegularExpression Id. */
  int LTOEQ = 12;
  /** RegularExpression Id. */
  int DER = 13;
  /** RegularExpression Id. */
  int DIV = 14;
  /** RegularExpression Id. */
  int LPAR = 15;
  /** RegularExpression Id. */
  int RPAR = 16;
  /** RegularExpression Id. */
  int TRUE = 17;
  /** RegularExpression Id. */
  int FALSE = 18;
  /** RegularExpression Id. */
  int EQ = 19;
  /** RegularExpression Id. */
  int NEQ = 20;
  /** RegularExpression Id. */
  int AND = 21;
  /** RegularExpression Id. */
  int OR = 22;
  /** RegularExpression Id. */
  int IFQ = 23;
  /** RegularExpression Id. */
  int COLON = 24;
  /** RegularExpression Id. */
  int SEMICOLON = 25;
  /** RegularExpression Id. */
  int WHILE = 26;
  /** RegularExpression Id. */
  int DO = 27;
  /** RegularExpression Id. */
  int END = 28;
  /** RegularExpression Id. */
  int NEW = 29;
  /** RegularExpression Id. */
  int ASSIGN = 30;
  /** RegularExpression Id. */
  int UNIT = 31;
  /** RegularExpression Id. */
  int EOL = 32;
  /** RegularExpression Id. */
  int LET = 33;
  /** RegularExpression Id. */
  int IN = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int THEN = 36;
  /** RegularExpression Id. */
  int ELSE = 37;
  /** RegularExpression Id. */
  int FUN = 38;
  /** RegularExpression Id. */
  int ARROW = 39;
  /** RegularExpression Id. */
  int LBRAC = 40;
  /** RegularExpression Id. */
  int RBRAC = 41;
  /** RegularExpression Id. */
  int COMMA = 42;
  /** RegularExpression Id. */
  int FIRST = 43;
  /** RegularExpression Id. */
  int SECOND = 44;
  /** RegularExpression Id. */
  int LAST = 45;
  /** RegularExpression Id. */
  int INT = 46;
  /** RegularExpression Id. */
  int DIGIT = 47;
  /** RegularExpression Id. */
  int ID = 48;
  /** RegularExpression Id. */
  int LETTER = 49;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "<Num>",
    "\"+\"",
    "\"*\"",
    "\"-\"",
    "\"~\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"!\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"true\"",
    "\"false\"",
    "\"=\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"?\"",
    "\":\"",
    "\";\"",
    "\"while\"",
    "\"do\"",
    "\"end\"",
    "\"new\"",
    "\":=\"",
    "\"()\"",
    "\"\\n\"",
    "\"let\"",
    "\"in\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"fun\"",
    "\"->\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\"first\"",
    "\"second\"",
    "\"last\"",
    "<INT>",
    "<DIGIT>",
    "<ID>",
    "<LETTER>",
  };

}
